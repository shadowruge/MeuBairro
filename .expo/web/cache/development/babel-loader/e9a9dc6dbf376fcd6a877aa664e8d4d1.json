{"ast":null,"code":"import * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nvar _Dimensions$get = Dimensions.get('window'),\n  _Dimensions$get$width = _Dimensions$get.width,\n  width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width,\n  _Dimensions$get$heigh = _Dimensions$get.height,\n  height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh;\nvar initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  var children = _ref.children,\n    style = _ref.style;\n  return React.createElement(SafeAreaInsetsContext.Consumer, null, function (insets) {\n    if (insets) {\n      return React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n    return React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["React","initialWindowMetrics","SafeAreaInsetsContext","SafeAreaProvider","width","height","Dimensions","get","initialMetrics","Platform","OS","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","children","style","styles","container","StyleSheet","create","flex"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,UAAA;AAAA,OAAA,QAAA;AAAA,OAAA,UAAA;AAAA,OAAA,IAAA;AAS9B,SACEC,oBAAoB,EACpBC,qBAAqB,EACrBC,gBAAgB,QACX,gCAAgC;AAOvC,IAAA,eAAA,GAAkCG,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;EAAA,qBAAA,GAAA,eAAA,CAAlDH,KAAK;EAALA,KAAK,GAAA,qBAAA,cAAG,CAAC,GAAA,qBAAA;EAAA,qBAAA,GAAA,eAAA,CAAEC,MAAM;EAANA,MAAM,GAAA,qBAAA,cAAG,CAAA,GAAA,qBAAA;AAK5B,IAAMG,cAAc,GAClBC,QAAQ,CAACC,EAAE,KAAK,KAAK,IAAIT,oBAAoB,IAAI,IAAI,GACjD;EACEU,KAAK,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAET,KAAK,EAALA,KAAK;IAAEC,MAAAA,EAAAA;EAAO,CAAC;EACpCS,MAAM,EAAE;IAAEC,GAAG,EAAE,CAAC;IAAEC,IAAI,EAAE,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE;AACjD,CAAC,GACDjB,oBAAoB;AAE1B,eAAe,SAASkB,sBAAsB,CAAA,IAAA,EAA6B;EAA5B,IAAEC,QAAQ,GAAgB,IAAA,CAAxBA,QAAQ;IAAEC,KAAAA,GAAc,IAAA,CAAdA,KAAAA;EACzD,OACE,KAAA,CAAA,aAAA,CAAC,qBAAqB,CAAC,QAAQ,EAAA,IAAA,EAC3BP,UAAAA,MAAM,EAAK;IACX,IAAIA,MAAM,EAAE;MAIV,OAAO,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;QAAC,KAAK,EAAE,CAACQ,MAAM,CAACC,SAAS,EAAEF,KAAK;MAAE,CAAA,EAAED,QAAQ,CAAQ;IAClE;IAEA,OACE,KAAA,CAAA,aAAA,CAAC,gBAAgB,EAAA;MAAC,cAAc,EAAEZ,cAAe;MAAC,KAAK,EAAEa;IAAM,CAAA,EAC5DD,QAAQ,CACQ;EAEvB,CAAC,CAC8B;AAErC;AAEAD,sBAAsB,CAACX,cAAc,GAAGA,cAAc;AAEtD,IAAMc,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAC/BF,SAAS,EAAE;IACTG,IAAI,EAAE;EACR;AACF,CAAC,CAAC","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, StyleSheet, View } from 'react-native';\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nconst {\n  width = 0,\n  height = 0\n} = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width,\n    height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  let {\n    children,\n    style\n  } = _ref;\n  return /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => {\n    if (insets) {\n      // If we already have insets, don't wrap the stack in another safe area provider\n      // This avoids an issue with updates at the cost of potentially incorrect values\n      // https://github.com/react-navigation/react-navigation/issues/174\n      return /*#__PURE__*/React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n    return /*#__PURE__*/React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\n//# sourceMappingURL=SafeAreaProviderCompat.js.map"]},"metadata":{},"sourceType":"module"}