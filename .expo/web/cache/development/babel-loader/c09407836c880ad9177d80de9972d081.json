{"ast":null,"code":"export default function checkDuplicateRouteNames(state) {\n  var duplicates = [];\n  var getRouteNames = function getRouteNames(location, state) {\n    state.routes.forEach(function (route) {\n      var _route$state, _route$state$routeNam;\n      var currentLocation = location ? location + \" > \" + route.name : route.name;\n      (_route$state = route.state) === null || _route$state === void 0 ? void 0 : (_route$state$routeNam = _route$state.routeNames) === null || _route$state$routeNam === void 0 ? void 0 : _route$state$routeNam.forEach(function (routeName) {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, currentLocation + \" > \" + route.name]);\n        }\n      });\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n  getRouteNames('', state);\n  return duplicates;\n}","map":{"version":3,"sources":["checkDuplicateRouteNames.tsx"],"names":["checkDuplicateRouteNames","state","duplicates","getRouteNames","location","routes","forEach","route","currentLocation","name","routeNames","routeName","push"],"mappings":"AAEA,eAAe,SAASA,wBAAwB,CAACC,KAAsB,EAAE;EACvE,IAAMC,UAAsB,GAAG,EAAE;EAEjC,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CACjBC,QAAgB,EAChBH,KAAsD,EACnD;IACHA,KAAK,CAACI,MAAM,CAACC,OAAO,CAAEC,UAAAA,KAA+B,EAAK;MAAA,IAAA,YAAA,EAAA,qBAAA;MACxD,IAAMC,eAAe,GAAGJ,QAAQ,GACzBA,QAAS,WAAKG,KAAK,CAACE,IAAK,GAC5BF,KAAK,CAACE,IAAI;MAEd,CAAA,YAAA,GAAA,KAAK,CAACR,KAAK,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAX,YAAA,CAAaS,UAAU,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAvB,qBAAA,CAAyBJ,OAAO,CAAEK,UAAAA,SAAS,EAAK;QAC9C,IAAIA,SAAS,KAAKJ,KAAK,CAACE,IAAI,EAAE;UAC5BP,UAAU,CAACU,IAAI,CAAC,CACdJ,eAAe,EACZA,eAAgB,WAAKD,KAAK,CAACE,IAAK,CACpC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,IAAIF,KAAK,CAACN,KAAK,EAAE;QACfE,aAAa,CAACK,eAAe,EAAED,KAAK,CAACN,KAAK,CAAC;MAC7C;IACF,CAAC,CAAC;EACJ,CAAC;EAEDE,aAAa,CAAC,EAAE,EAAEF,KAAK,CAAC;EAExB,OAAOC,UAAU;AACnB","sourceRoot":"../../src","sourcesContent":["export default function checkDuplicateRouteNames(state) {\n  const duplicates = [];\n  const getRouteNames = (location, state) => {\n    state.routes.forEach(route => {\n      var _route$state, _route$state$routeNam;\n      const currentLocation = location ? `${location} > ${route.name}` : route.name;\n      (_route$state = route.state) === null || _route$state === void 0 ? void 0 : (_route$state$routeNam = _route$state.routeNames) === null || _route$state$routeNam === void 0 ? void 0 : _route$state$routeNam.forEach(routeName => {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, `${currentLocation} > ${route.name}`]);\n        }\n      });\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n  getRouteNames('', state);\n  return duplicates;\n}\n//# sourceMappingURL=checkDuplicateRouteNames.js.map"]},"metadata":{},"sourceType":"module"}