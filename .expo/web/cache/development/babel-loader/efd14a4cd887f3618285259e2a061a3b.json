{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect } from 'react';\nimport ExpoKeepAwake from \"./ExpoKeepAwake\";\nexport var ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    if (ExpoKeepAwake.isAvailableAsync) {\n      return yield ExpoKeepAwake.isAvailableAsync();\n    }\n    return true;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function useKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  useEffect(function () {\n    var isMounted = true;\n    activateKeepAwakeAsync(tag).then(function () {\n      if (isMounted && ExpoKeepAwake.addListenerForTag && options != null && options.listener) {\n        addListener(tag, options.listener);\n      }\n    });\n    return function () {\n      isMounted = false;\n      if (options != null && options.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(function () {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\nexport function activateKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  console.warn('`activateKeepAwake` is deprecated. Use `activateKeepAwakeAsync` instead.');\n  return activateKeepAwakeAsync(tag);\n}\nexport function activateKeepAwakeAsync() {\n  return _activateKeepAwakeAsync.apply(this, arguments);\n}\nfunction _activateKeepAwakeAsync() {\n  _activateKeepAwakeAsync = _asyncToGenerator(function* () {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n    yield ExpoKeepAwake.activate == null ? void 0 : ExpoKeepAwake.activate(tag);\n  });\n  return _activateKeepAwakeAsync.apply(this, arguments);\n}\nexport function deactivateKeepAwake() {\n  return _deactivateKeepAwake.apply(this, arguments);\n}\nfunction _deactivateKeepAwake() {\n  _deactivateKeepAwake = _asyncToGenerator(function* () {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n    yield ExpoKeepAwake.deactivate == null ? void 0 : ExpoKeepAwake.deactivate(tag);\n  });\n  return _deactivateKeepAwake.apply(this, arguments);\n}\nexport function addListener(tagOrListener, listener) {\n  if (!ExpoKeepAwake.addListenerForTag) {\n    throw new UnavailabilityError('ExpoKeepAwake', 'addListenerForTag');\n  }\n  var tag = typeof tagOrListener === 'string' ? tagOrListener : ExpoKeepAwakeTag;\n  var _listener = typeof tagOrListener === 'function' ? tagOrListener : listener;\n  return ExpoKeepAwake.addListenerForTag(tag, _listener);\n}\nexport * from \"./KeepAwake.types\";","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAAA,SAAuB,mBAAmB,QAAQ,mBAAmB;AACrE,SAAS,SAAS,QAAQ,OAAO;AAEjC,OAAO,aAAa;AAIpB,OAAO,IAAM,gBAAgB,GAAG,yBAAyB;AAGzD,gBAAsB,gBAAgB,CAAA;EAAA,OAAA,iBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAKrC,SAAA,kBAAA;EAAA,iBAAA,GAAA,iBAAA,CALM,aAA+B;IACpC,IAAI,aAAa,CAAC,gBAAgB,EAAE;MAClC,aAAa,aAAa,CAAC,gBAAgB,CAAA,CAAE;IAC9C;IACD,OAAO,IAAI;EACb,CAAC;EAAA,OAAA,iBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAWD,OAAM,SAAU,YAAY,CAAA,EAA2D;EAAA,IAA1D,GAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAc,gBAAgB;EAAA,IAAE,OAA0B,GAAA,SAAA,CAAA,MAAA,OAAA,SAAA,MAAA,SAAA;EACrF,SAAS,CAAC,YAAK;IACb,IAAI,SAAS,GAAG,IAAI;IACpB,sBAAsB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAK;MACpC,IAAI,SAAS,IAAI,aAAa,CAAC,iBAAiB,IAAI,OAAO,YAAP,OAAO,CAAE,QAAQ,EAAE;QACrE,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,QAAQ,CAAC;MACnC;IACH,CAAC,CAAC;IACF,OAAO,YAAK;MACV,SAAS,GAAG,KAAK;MACjB,IAAI,OAAO,YAAP,OAAO,CAAE,0BAA0B,EAAE;QACvC,mBAAmB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,YAAK,CAAE,CAAC,CAAC;OACzC,MAAM;QACL,mBAAmB,CAAC,GAAG,CAAC;MACzB;IACH,CAAC;EACH,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACX;AAeA,OAAM,SAAU,iBAAiB,CAAA,EAA+B;EAAA,IAA9B,GAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAc,gBAAgB;EAC9D,OAAO,CAAC,IAAI,CAAC,0EAA0E,CAAC;EACxF,OAAO,sBAAsB,CAAC,GAAG,CAAC;AACpC;AAcA,gBAAsB,sBAAsB,CAAA;EAAA,OAAA,uBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAE3C,SAAA,wBAAA;EAAA,uBAAA,GAAA,iBAAA,CAFM,aAAoE;IAAA,IAA9B,GAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAc,gBAAgB;IACzE,MAAM,aAAa,CAAC,QAAQ,oBAAtB,aAAa,CAAC,QAAQ,CAAG,GAAG,CAAC;EACrC,CAAC;EAAA,OAAA,uBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAUD,gBAAsB,mBAAmB,CAAA;EAAA,OAAA,oBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAExC,SAAA,qBAAA;EAAA,oBAAA,GAAA,iBAAA,CAFM,aAAiE;IAAA,IAA9B,GAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAc,gBAAgB;IACtE,MAAM,aAAa,CAAC,UAAU,oBAAxB,aAAa,CAAC,UAAU,CAAG,GAAG,CAAC;EACvC,CAAC;EAAA,OAAA,oBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAcD,OAAM,SAAU,WAAW,CACzB,aAAyC,EACzC,QAA4B,EAAA;EAG5B,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE;IACpC,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,mBAAmB,CAAC;EACpE;EAED,IAAM,GAAG,GAAG,OAAO,aAAa,KAAK,QAAQ,GAAG,aAAa,GAAG,gBAAgB;EAChF,IAAM,SAAS,GAAG,OAAO,aAAa,KAAK,UAAU,GAAG,aAAa,GAAG,QAAQ;EAEhF,OAAO,aAAa,CAAC,iBAAiB,CAAC,GAAG,EAAE,SAAS,CAAC;AACxD;AAEA","sourcesContent":["import { Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect } from 'react';\n\nimport ExpoKeepAwake from './ExpoKeepAwake';\nimport { KeepAwakeListener, KeepAwakeOptions } from './KeepAwake.types';\n\n/** Default tag, used when no tag has been specified in keep awake method calls. */\nexport const ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\n\n/** @returns `true` on all platforms except [unsupported web browsers](https://caniuse.com/wake-lock). */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (ExpoKeepAwake.isAvailableAsync) {\n    return await ExpoKeepAwake.isAvailableAsync();\n  }\n  return true;\n}\n\n/**\n * A React hook to keep the screen awake for as long as the owner component is mounted.\n * The optionally provided `tag` argument is used when activating and deactivating the keep-awake\n * feature. If unspecified, the default `tag` is used. See the documentation for `activateKeepAwakeAsync`\n * below to learn more about the `tag` argument.\n *\n * @param tag Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @param options Additional options for the keep awake hook.\n */\nexport function useKeepAwake(tag: string = ExpoKeepAwakeTag, options?: KeepAwakeOptions): void {\n  useEffect(() => {\n    let isMounted = true;\n    activateKeepAwakeAsync(tag).then(() => {\n      if (isMounted && ExpoKeepAwake.addListenerForTag && options?.listener) {\n        addListener(tag, options.listener);\n      }\n    });\n    return () => {\n      isMounted = false;\n      if (options?.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(() => {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n *\n * Web support [is limited](https://caniuse.com/wake-lock).\n *\n * @param tag Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @deprecated use `activateKeepAwakeAsync` instead.\n */\nexport function activateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  console.warn('`activateKeepAwake` is deprecated. Use `activateKeepAwakeAsync` instead.');\n  return activateKeepAwakeAsync(tag);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n *\n * Web support [is limited](https://caniuse.com/wake-lock).\n *\n * @param tag Tag to lock screen sleep prevention. If not provided, the default tag is used.\n */\nexport async function activateKeepAwakeAsync(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.activate?.(tag);\n}\n\n// @needsAudit\n/**\n * Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag`\n * is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.\n *\n * @param tag Tag to release the lock on screen sleep prevention. If not provided,\n * the default tag is used.\n */\nexport async function deactivateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.deactivate?.(tag);\n}\n\n/**\n * Observe changes to the keep awake timer.\n * On web, this changes when navigating away from the active window/tab. No-op on native.\n * @platform web\n *\n * @example\n * ```ts\n * KeepAwake.addListener(({ state }) => {\n *   // ...\n * });\n * ```\n */\nexport function addListener(\n  tagOrListener: string | KeepAwakeListener,\n  listener?: KeepAwakeListener\n): Subscription {\n  // Assert so the type is non-nullable.\n  if (!ExpoKeepAwake.addListenerForTag) {\n    throw new UnavailabilityError('ExpoKeepAwake', 'addListenerForTag');\n  }\n\n  const tag = typeof tagOrListener === 'string' ? tagOrListener : ExpoKeepAwakeTag;\n  const _listener = typeof tagOrListener === 'function' ? tagOrListener : listener;\n\n  return ExpoKeepAwake.addListenerForTag(tag, _listener);\n}\n\nexport * from './KeepAwake.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}